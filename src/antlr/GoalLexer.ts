// Generated from grammar/Goal.g4 by ANTLR 4.13.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class GoalLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly BOOLEAN = 14;
	public static readonly GOAL = 15;
	public static readonly GOALNAME = 16;
	public static readonly NUMBER = 17;
	public static readonly ID = 18;
	public static readonly FLOAT = 19;
	public static readonly SEQ = 20;
	public static readonly INT = 21;
	public static readonly TASK_TKN = 22;
	public static readonly GOAL_TKN = 23;
	public static readonly SKIPP = 24;
	public static readonly X = 25;
	public static readonly NEWLINE = 26;
	public static readonly WS = 27;
	public static readonly UUID_V4 = 28;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'id'", 
                                                            "':'", "'text'", 
                                                            "'type'", "'istar.'", 
                                                            "'x'", "'y'", 
                                                            "'customProperties'", 
                                                            "'selected'", 
                                                            "','", "'Task'", 
                                                            "'Goal'", "'Actor'", 
                                                            null, null, 
                                                            null, null, 
                                                            null, null, 
                                                            "';'", "'#'", 
                                                            "'T'", "'G'", 
                                                            "'skip'", "'X'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             "BOOLEAN", 
                                                             "GOAL", "GOALNAME", 
                                                             "NUMBER", "ID", 
                                                             "FLOAT", "SEQ", 
                                                             "INT", "TASK_TKN", 
                                                             "GOAL_TKN", 
                                                             "SKIPP", "X", 
                                                             "NEWLINE", 
                                                             "WS", "UUID_V4" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "BOOLEAN", "GOAL", "GOALNAME", "NUMBER", 
		"ID", "FLOAT", "SEQ", "INT", "TASK_TKN", "GOAL_TKN", "SKIPP", "X", "NEWLINE", 
		"WS", "DIGIT", "UUID_V4", "HEX_8", "HEX_4", "HEX_3", "HEX",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, GoalLexer._ATN, GoalLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "Goal.g4"; }

	public get literalNames(): (string | null)[] { return GoalLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return GoalLexer.symbolicNames; }
	public get ruleNames(): string[] { return GoalLexer.ruleNames; }

	public get serializedATN(): number[] { return GoalLexer._serializedATN; }

	public get channelNames(): string[] { return GoalLexer.channelNames; }

	public get modeNames(): string[] { return GoalLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,28,246,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
	3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
	7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
	8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,
	1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,
	13,147,8,13,1,14,1,14,1,14,1,14,1,14,1,15,4,15,155,8,15,11,15,12,15,156,
	1,16,4,16,160,8,16,11,16,12,16,161,1,17,1,17,1,17,1,17,1,17,3,17,169,8,
	17,1,18,4,18,172,8,18,11,18,12,18,173,1,18,3,18,177,8,18,1,18,5,18,180,
	8,18,10,18,12,18,183,9,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
	1,23,1,23,1,23,1,23,1,24,1,24,1,25,4,25,201,8,25,11,25,12,25,202,1,26,4,
	26,206,8,26,11,26,12,26,207,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,
	29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,0,0,
	33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
	29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
	53,27,55,0,57,28,59,0,61,0,63,0,65,0,1,0,6,2,0,65,90,97,122,2,0,10,10,13,
	13,3,0,34,34,123,123,125,125,1,0,48,57,3,0,56,57,65,66,97,98,3,0,48,57,
	65,70,97,102,250,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
	0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
	0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
	0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
	0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
	0,0,0,0,57,1,0,0,0,1,67,1,0,0,0,3,70,1,0,0,0,5,72,1,0,0,0,7,77,1,0,0,0,
	9,82,1,0,0,0,11,89,1,0,0,0,13,91,1,0,0,0,15,93,1,0,0,0,17,110,1,0,0,0,19,
	119,1,0,0,0,21,121,1,0,0,0,23,126,1,0,0,0,25,131,1,0,0,0,27,146,1,0,0,0,
	29,148,1,0,0,0,31,154,1,0,0,0,33,159,1,0,0,0,35,168,1,0,0,0,37,171,1,0,
	0,0,39,184,1,0,0,0,41,186,1,0,0,0,43,188,1,0,0,0,45,190,1,0,0,0,47,192,
	1,0,0,0,49,197,1,0,0,0,51,200,1,0,0,0,53,205,1,0,0,0,55,211,1,0,0,0,57,
	213,1,0,0,0,59,226,1,0,0,0,61,235,1,0,0,0,63,240,1,0,0,0,65,244,1,0,0,0,
	67,68,5,105,0,0,68,69,5,100,0,0,69,2,1,0,0,0,70,71,5,58,0,0,71,4,1,0,0,
	0,72,73,5,116,0,0,73,74,5,101,0,0,74,75,5,120,0,0,75,76,5,116,0,0,76,6,
	1,0,0,0,77,78,5,116,0,0,78,79,5,121,0,0,79,80,5,112,0,0,80,81,5,101,0,0,
	81,8,1,0,0,0,82,83,5,105,0,0,83,84,5,115,0,0,84,85,5,116,0,0,85,86,5,97,
	0,0,86,87,5,114,0,0,87,88,5,46,0,0,88,10,1,0,0,0,89,90,5,120,0,0,90,12,
	1,0,0,0,91,92,5,121,0,0,92,14,1,0,0,0,93,94,5,99,0,0,94,95,5,117,0,0,95,
	96,5,115,0,0,96,97,5,116,0,0,97,98,5,111,0,0,98,99,5,109,0,0,99,100,5,80,
	0,0,100,101,5,114,0,0,101,102,5,111,0,0,102,103,5,112,0,0,103,104,5,101,
	0,0,104,105,5,114,0,0,105,106,5,116,0,0,106,107,5,105,0,0,107,108,5,101,
	0,0,108,109,5,115,0,0,109,16,1,0,0,0,110,111,5,115,0,0,111,112,5,101,0,
	0,112,113,5,108,0,0,113,114,5,101,0,0,114,115,5,99,0,0,115,116,5,116,0,
	0,116,117,5,101,0,0,117,118,5,100,0,0,118,18,1,0,0,0,119,120,5,44,0,0,120,
	20,1,0,0,0,121,122,5,84,0,0,122,123,5,97,0,0,123,124,5,115,0,0,124,125,
	5,107,0,0,125,22,1,0,0,0,126,127,5,71,0,0,127,128,5,111,0,0,128,129,5,97,
	0,0,129,130,5,108,0,0,130,24,1,0,0,0,131,132,5,65,0,0,132,133,5,99,0,0,
	133,134,5,116,0,0,134,135,5,111,0,0,135,136,5,114,0,0,136,26,1,0,0,0,137,
	138,5,116,0,0,138,139,5,114,0,0,139,140,5,117,0,0,140,147,5,101,0,0,141,
	142,5,102,0,0,142,143,5,97,0,0,143,144,5,108,0,0,144,145,5,115,0,0,145,
	147,5,101,0,0,146,137,1,0,0,0,146,141,1,0,0,0,147,28,1,0,0,0,148,149,5,
	71,0,0,149,150,3,35,17,0,150,151,5,58,0,0,151,152,3,31,15,0,152,30,1,0,
	0,0,153,155,7,0,0,0,154,153,1,0,0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,
	157,1,0,0,0,157,32,1,0,0,0,158,160,3,55,27,0,159,158,1,0,0,0,160,161,1,
	0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,34,1,0,0,0,163,169,3,37,18,0,
	164,165,3,37,18,0,165,166,3,49,24,0,166,169,1,0,0,0,167,169,3,49,24,0,168,
	163,1,0,0,0,168,164,1,0,0,0,168,167,1,0,0,0,169,36,1,0,0,0,170,172,3,55,
	27,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,
	176,1,0,0,0,175,177,5,46,0,0,176,175,1,0,0,0,176,177,1,0,0,0,177,181,1,
	0,0,0,178,180,3,55,27,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,
	181,182,1,0,0,0,182,38,1,0,0,0,183,181,1,0,0,0,184,185,5,59,0,0,185,40,
	1,0,0,0,186,187,5,35,0,0,187,42,1,0,0,0,188,189,5,84,0,0,189,44,1,0,0,0,
	190,191,5,71,0,0,191,46,1,0,0,0,192,193,5,115,0,0,193,194,5,107,0,0,194,
	195,5,105,0,0,195,196,5,112,0,0,196,48,1,0,0,0,197,198,5,88,0,0,198,50,
	1,0,0,0,199,201,7,1,0,0,200,199,1,0,0,0,201,202,1,0,0,0,202,200,1,0,0,0,
	202,203,1,0,0,0,203,52,1,0,0,0,204,206,7,2,0,0,205,204,1,0,0,0,206,207,
	1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,210,6,26,0,
	0,210,54,1,0,0,0,211,212,7,3,0,0,212,56,1,0,0,0,213,214,3,59,29,0,214,215,
	5,45,0,0,215,216,3,61,30,0,216,217,5,45,0,0,217,218,5,52,0,0,218,219,3,
	63,31,0,219,220,5,45,0,0,220,221,7,4,0,0,221,222,3,63,31,0,222,223,5,45,
	0,0,223,224,3,59,29,0,224,225,3,61,30,0,225,58,1,0,0,0,226,227,3,65,32,
	0,227,228,3,65,32,0,228,229,3,65,32,0,229,230,3,65,32,0,230,231,3,65,32,
	0,231,232,3,65,32,0,232,233,3,65,32,0,233,234,3,65,32,0,234,60,1,0,0,0,
	235,236,3,65,32,0,236,237,3,65,32,0,237,238,3,65,32,0,238,239,3,65,32,0,
	239,62,1,0,0,0,240,241,3,65,32,0,241,242,3,65,32,0,242,243,3,65,32,0,243,
	64,1,0,0,0,244,245,7,5,0,0,245,66,1,0,0,0,10,0,146,156,161,168,173,176,
	181,202,207,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!GoalLexer.__ATN) {
			GoalLexer.__ATN = new ATNDeserializer().deserialize(GoalLexer._serializedATN);
		}

		return GoalLexer.__ATN;
	}


	static DecisionsToDFA = GoalLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}